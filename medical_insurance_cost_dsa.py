# -*- coding: utf-8 -*-
"""Medical Insurance Cost DSA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17XO1FVC1WY1AIleZSZ5piz11lYXglPk4

**Importing Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

mi_dataset = pd.read_csv('/content/insurance.csv')

# print the data
mi_dataset.head()

# check the size of dataset
mi_dataset.shape

mi_dataset.info()

# checking missing value
mi_dataset.isnull().sum()

"""Data Analyzing Process start"""

# statistical data
mi_dataset.describe()

# Age value
sb.set()
plt.figure(figsize=(6,6))
sb.distplot(mi_dataset['age'])
plt.title("Age value")
plt.show()

# gender value
  plt.figure(figsize=(6,6))
  sb.countplot(x='sex', data=mi_dataset)
  plt.title("Gender Value")
  plt.show()

# total male & female in number
mi_dataset['sex'].value_counts()

# bmi value
plt.figure(figsize=(6,6))
sb.displot(mi_dataset['bmi'])
plt.title("BMI value")
plt.show()

#  children value
plt.figure(figsize=(6,6))
sb.countplot(x='children', data=mi_dataset)
plt.title("children value")
plt.show()

# count children
mi_dataset.value_counts('children')

# smoker value
plt.figure(figsize=(6,6))
sb.countplot(x='smoker', data=mi_dataset)
plt.title('smoker')
plt.show()

# count smoker yes or no
mi_dataset['smoker'].value_counts()

# region value
plt.figure(figsize=(6,6))
sb.countplot(x='region', data=mi_dataset)
plt.title('region')
plt.show()

# count region
mi_dataset['region'].value_counts()

#  charges value
plt.figure(figsize=(6,6))
sb.displot(mi_dataset['charges'])
plt.title('Charges value')
plt.show()

"""Data Pre-Processing start"""

# encoding sex column
mi_dataset.replace({'sex':{'male':0,'female':1}}, inplace=True)

3 #  'smoker'
mi_dataset.replace({'smoker':{'yes':0,'no':1}}, inplace=True)

#  'region'
mi_dataset.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)

# removing charges column from x and add in y
X = mi_dataset.drop(columns='charges', axis=1)
Y = mi_dataset['charges']

print(X)

print(Y)

# spliting data into train and test
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

#  Linear Regression model
regressor = LinearRegression()

regressor.fit(X_train, Y_train)

# prediction on training data
training_data_prediction =regressor.predict(X_train)

# R squared value
r2_train = metrics.r2_score(Y_train, training_data_prediction)
print('R squared vale : ', r2_train)

# prediction on test data
test_data_prediction =regressor.predict(X_test)

# R squared value
r2_test = metrics.r2_score(Y_test, test_data_prediction)
print('R squared vale : ', r2_test)

"""**Predicting Medical Insurance Cost**"""

input_data = (32,1,27.81,0,1,0)

# changing input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = regressor.predict(input_data_reshaped)
print(prediction)

print('The medical insurance cost is  ', prediction[0])